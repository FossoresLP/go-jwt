package rs

import (
	"crypto/rsa"
	"math/big"
	"reflect"
	"testing"
)

func TestKeySet_SetKeys(t *testing.T) {
	ks := KeySet{}
	// Test SetKeys with nil keys
	err := ks.SetKeys(nil, nil)
	if err != nil {
		t.Errorf("SetKeys() with nil keys should not return an error but returned: %s", err.Error())
	}

	// Define keys for testing including encoded versions
	priv := &rsa.PrivateKey{PublicKey: rsa.PublicKey{N: big.NewInt(3603479687), E: 65537}, D: big.NewInt(674849825), Primes: []*big.Int{big.NewInt(64063), big.NewInt(56249)}, Precomputed: rsa.PrecomputedValues{Dp: big.NewInt(20717), Dq: big.NewInt(42569), Qinv: big.NewInt(7600), CRTValues: []rsa.CRTValue{}}}
	pkcs1 := []byte{0x30, 0x2c, 0x2, 0x1, 0x0, 0x2, 0x5, 0x0, 0xd6, 0xc8, 0xbc, 0x87, 0x2, 0x3, 0x1, 0x0, 0x1, 0x2, 0x4, 0x28, 0x39, 0x64, 0x21, 0x2, 0x3, 0x0, 0xfa, 0x3f, 0x2, 0x3, 0x0, 0xdb, 0xb9, 0x2, 0x2, 0x50, 0xed, 0x2, 0x3, 0x0, 0xa6, 0x49, 0x2, 0x2, 0x1d, 0xb0}
	pkcs8 := []byte{0x30, 0x42, 0x2, 0x1, 0x0, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x4, 0x2e, 0x30, 0x2c, 0x2, 0x1, 0x0, 0x2, 0x5, 0x0, 0xd6, 0xc8, 0xbc, 0x87, 0x2, 0x3, 0x1, 0x0, 0x1, 0x2, 0x4, 0x28, 0x39, 0x64, 0x21, 0x2, 0x3, 0x0, 0xfa, 0x3f, 0x2, 0x3, 0x0, 0xdb, 0xb9, 0x2, 0x2, 0x50, 0xed, 0x2, 0x3, 0x0, 0xa6, 0x49, 0x2, 0x2, 0x1d, 0xb0}
	pub := rsa.PublicKey{N: big.NewInt(3603479687), E: 65537}
	pkix := []byte{0x30, 0x20, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0xf, 0x0, 0x30, 0xc, 0x2, 0x5, 0x0, 0xd6, 0xc8, 0xbc, 0x87, 0x2, 0x3, 0x1, 0x0, 0x1}

	// Test SetKeys with PKCS1-encoded private key
	err = ks.SetKeys(pkcs1, nil)
	if err != nil {
		t.Errorf("SetKeys() with PKCS1 private key should not return an error but returned: %s", err.Error())
	}
	if !reflect.DeepEqual(ks.private, priv) {
		t.Errorf("SetKeys() with PKCS1 private key should be decoded to %+v but is %+v", priv, ks.private)
	}

	// Test SetKeys with PKCS8-encoded private key
	err = ks.SetKeys(pkcs8, nil)
	if err != nil {
		t.Errorf("SetKeys() with PKCS8 private key should not return an error but returned: %s", err.Error())
	}
	if !reflect.DeepEqual(ks.private, priv) {
		t.Errorf("SetKeys() with PKCS1 private key should be decoded to %+v but is %+v", priv, ks.private)
	}

	// Test SetKeys with invalid private key
	err = ks.SetKeys([]byte("not a key"), nil)
	if err == nil {
		t.Error("SetKeys() with invalid private key should return an error but did not")
	}

	// Test SetKeys with PKCS8-encoded private key of an invalid type (ECDSA P224)
	err = ks.SetKeys([]byte{0x30, 0x78, 0x2, 0x1, 0x0, 0x30, 0x10, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x5, 0x2b, 0x81, 0x4, 0x0, 0x21, 0x4, 0x61, 0x30, 0x5f, 0x2, 0x1, 0x1, 0x4, 0x1c, 0x61, 0x59, 0x5b, 0x81, 0x6d, 0x58, 0x8d, 0x96, 0x33, 0xeb, 0xc0, 0xbd, 0xb1, 0x1f, 0xb6, 0x12, 0xd3, 0xb3, 0x7c, 0x9b, 0x7e, 0xd5, 0x15, 0xf0, 0xa0, 0xc0, 0xc9, 0x48, 0xa1, 0x3c, 0x3, 0x3a, 0x0, 0x4, 0xaa, 0x42, 0xa9, 0x6b, 0xfe, 0xbc, 0x85, 0x49, 0xcb, 0x96, 0xe4, 0x15, 0x11, 0x8, 0xf, 0xdf, 0x16, 0x4a, 0x15, 0xb0, 0x9b, 0x33, 0x64, 0x33, 0x6c, 0x8e, 0xbc, 0x87, 0xaf, 0x1f, 0x79, 0xfe, 0xc2, 0xd3, 0x86, 0xa9, 0x12, 0xc4, 0x4e, 0x32, 0x5d, 0xaa, 0x7c, 0xfc, 0x8b, 0xed, 0x4f, 0xd2, 0xa, 0x10, 0xe1, 0xae, 0x0, 0x3a, 0xde, 0x41}, nil)
	if err == nil {
		t.Error("SetKeys() with unsupported private key type (ECDSA / DSA) should fail but did not")
	}

	// Test SetKeys with a RSA public key
	err = ks.SetKeys(nil, pkix)
	if err != nil {
		t.Errorf("SetKeys() with PKIX public key should not return an error but returned: %s", err.Error())
	}
	if !reflect.DeepEqual(ks.public, &pub) {
		t.Errorf("SetKeys() with PKIX public key should be decoded to %+v but is %+v", &pub, ks.public)
	}

	// Test SetKeys with invalid public key
	err = ks.SetKeys(nil, []byte("not a key"))
	if err == nil {
		t.Error("SetKeys() with invalid public key should return an error but did not")
	}

	// Test SetKeys with invalid public key type (ECDSA / DSA)
	err = ks.SetKeys(nil, []byte{0x30, 0x4e, 0x30, 0x10, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x5, 0x2b, 0x81, 0x4, 0x0, 0x21, 0x3, 0x3a, 0x0, 0x4, 0x92, 0x6a, 0x93, 0xf0, 0x42, 0xec, 0x1b, 0x46, 0x95, 0x47, 0xd4, 0x0, 0xfa, 0x45, 0x83, 0x39, 0x8, 0x1e, 0xe8, 0x2b, 0xb7, 0xbc, 0x6c, 0xd7, 0x96, 0x80, 0xc, 0x2d, 0xb6, 0xc1, 0x5c, 0x33, 0x14, 0x44, 0xb7, 0xc, 0xc5, 0x98, 0x4b, 0x7a, 0xf2, 0x55, 0x9, 0x22, 0xac, 0x5c, 0x67, 0xd8, 0x46, 0xb2, 0x42, 0xc9, 0x9f, 0xfc, 0x6f, 0x4d})
	if err == nil {
		t.Error("SetKeys() with unsupported public key type (ECDSA / DSA) should fail but did not")
	}
}

func TestKeySet_SetKeyID(t *testing.T) {
	ks := KeySet{}
	ks.SetKeyID("key_id")
	if !reflect.DeepEqual(ks, KeySet{kid: "key_id"}) {
		t.Errorf("SetKeyID failed to set key ID. Expected %+v but got %+v", KeySet{kid: "key_id"}, ks)
	}
}

func TestKeySet_SetKeyURL(t *testing.T) {
	ks := KeySet{}
	ks.SetKeyURL("key_url")
	if !reflect.DeepEqual(ks, KeySet{jku: "key_url"}) {
		t.Errorf("SetKeyURL failed to set key URL. Expected %+v but got %+v", KeySet{jku: "key_url"}, ks)
	}
}

func TestKeySet_GetPublicKey(t *testing.T) {
	k := rsa.PublicKey{N: big.NewInt(3603479687), E: 65537} // Encodes to []byte{0x30, 0x20, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0xf, 0x0, 0x30, 0xc, 0x2, 0x5, 0x0, 0xd6, 0xc8, 0xbc, 0x87, 0x2, 0x3, 0x1, 0x0, 0x1}
	e := rsa.PublicKey{N: nil, E: 0}
	tests := []struct {
		name string
		ks   KeySet
		want PublicKey
	}{
		{"Normal", KeySet{public: &k, kid: "key_id"}, PublicKey{[]byte{0x30, 0x20, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0xf, 0x0, 0x30, 0xc, 0x2, 0x5, 0x0, 0xd6, 0xc8, 0xbc, 0x87, 0x2, 0x3, 0x1, 0x0, 0x1}, "key_id"}},
		{"Invalid key", KeySet{public: &e}, PublicKey{}},
		{"No key", KeySet{}, PublicKey{}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ks.GetPublicKey(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("KeySet.GetPublicKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestPublicKey_GetPublicKey(t *testing.T) {
	tests := []struct {
		name string
		s    PublicKey
		want []byte
	}{
		{"Normal", PublicKey{[]byte("test"), ""}, []byte("test")},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.s.GetPublicKey(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("PublicKey.GetPublicKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestPublicKey_GetKeyID(t *testing.T) {
	tests := []struct {
		name string
		s    PublicKey
		want string
	}{
		{"Normal", PublicKey{nil, "key_id"}, "key_id"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.s.GetKeyID(); got != tt.want {
				t.Errorf("PublicKey.GetKeyID() = %v, want %v", got, tt.want)
			}
		})
	}
}
