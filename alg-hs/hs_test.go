package hs

import (
	"testing"

	"github.com/fossoreslp/go-jwt"
)

func Test_algToString(t *testing.T) {
	tests := []struct {
		name string
		alg  int
		want string
	}{
		{"HS256", HS256, "HS256"},
		{"HS384", HS384, "HS384"},
		{"HS512", HS512, "HS512"},
		{"Invalid", 12, ""},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := algToString(tt.alg); got != tt.want {
				t.Errorf("algToString() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestProvider_Verify(t *testing.T) {
	type args struct {
		data []byte
		sig  []byte
		h    jwt.Header
	}
	tests := []struct {
		name    string
		p       Provider
		args    args
		wantErr bool
	}{
		{"HS256", Provider{keys: map[string][]byte{"key_id": []byte("signing_key")}}, args{[]byte("test"), []byte{0x9f, 0xbf, 0xc4, 0xfd, 0x44, 0x5b, 0xe4, 0x40, 0x04, 0xab, 0x3d, 0x7a, 0xe4, 0x54, 0x22, 0x53, 0xa6, 0x44, 0x04, 0xc9, 0x1e, 0x19, 0xf0, 0xd4, 0x76, 0xbb, 0x77, 0x42, 0x08, 0x32, 0x0b, 0x93}, jwt.Header{Alg: "HS256", Kid: "key_id"}}, false},
		{"HS384", Provider{keys: map[string][]byte{"key_id": []byte("signing_key")}}, args{[]byte("test"), []byte{0x4e, 0xdc, 0x04, 0x8f, 0xd7, 0xfe, 0xe2, 0xff, 0xdb, 0xc5, 0x5f, 0xd6, 0xad, 0x09, 0x4e, 0xb9, 0x80, 0xef, 0x64, 0xbe, 0x33, 0xf3, 0xc9, 0x10, 0xa0, 0x1e, 0x98, 0xf6, 0x4d, 0x72, 0x0c, 0x1b, 0xe6, 0x31, 0xbe, 0xfb, 0x82, 0x87, 0x9b, 0xb4, 0x22, 0x5b, 0x01, 0x18, 0x58, 0x5c, 0xbc, 0x8a}, jwt.Header{Alg: "HS384", Kid: "key_id"}}, false},
		{"HS512", Provider{keys: map[string][]byte{"key_id": []byte("signing_key")}}, args{[]byte("test"), []byte{0x6c, 0x46, 0xbe, 0xc9, 0xe8, 0xf0, 0xc2, 0x6c, 0xf6, 0x4d, 0x89, 0xd4, 0x7a, 0x85, 0x42, 0xff, 0xb8, 0xb9, 0xe9, 0x97, 0x21, 0xb5, 0x4b, 0x44, 0x54, 0xff, 0x6f, 0x74, 0x14, 0x16, 0x3a, 0xb8, 0xed, 0x07, 0x83, 0x0d, 0xe0, 0xc2, 0xd7, 0x75, 0x1b, 0xbc, 0xfa, 0xe1, 0xc9, 0x44, 0x3d, 0x8c, 0x28, 0xb0, 0x7c, 0x5b, 0xc0, 0x88, 0xac, 0x9b, 0x25, 0xab, 0x35, 0x1f, 0x26, 0xc6, 0xcc, 0x31}, jwt.Header{Alg: "HS512", Kid: "key_id"}}, false},
		{"Invalid algorithm", Provider{}, args{nil, nil, jwt.Header{Alg: "unknown"}}, true},
		{"Unknown key ID", Provider{keys: map[string][]byte{"key_id": []byte("signing_key")}}, args{nil, nil, jwt.Header{Alg: "HS256", Kid: "unknown"}}, true},
		{"Invalid signature", Provider{keys: map[string][]byte{"key_id": []byte("signing_key")}}, args{[]byte("test"), []byte("invalid signature"), jwt.Header{Alg: "HS256", Kid: "key_id"}}, true},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tt.p.Verify(tt.args.data, tt.args.sig, tt.args.h); (err != nil) != tt.wantErr {
				t.Errorf("Provider.Verify() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
